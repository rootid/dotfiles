* Expt
;;#+begin_src emacs-lisp
;;(use-package org-ql
;;  :ensure t)
;;
;;#+end_src

* Basic Key Bindings
Use key strokes economically. Refer - [[https://sites.google.com/site/steveyegge2/effective-emacs][Efffective Emacs From Yegge]] 

#+begin_src emacs-lisp
  ;; M-x alternative
  (global-set-key (kbd "C-x C-m") 'execute-extended-command)
  ;; Open shell 
  (global-set-key (kbd "C-c e") 'eshell)
  
  ;; Todo Verify usefulness o/w delete it
  (global-set-key (kbd "C-c f") 'find-file)
  (global-set-key (kbd "C-c b") 'switch-to-buffer)
  (global-set-key (kbd "C-c w") 'save-buffer)
#+end_src

* Emacs Code Formatter
Format elisp code in Org mode file

#+BEGIN_SRC emacs-lisp
  ;; No tabs
  (setq-default tab-always-indent t) 

  (defun vs_utils/indent_org_block_automatically ()
    (interactive)
    (when (org-in-src-block-p)
      (org-edit-special)
      (indent-region (point-min) (point-max))
      (org-edit-src-exit)))

  (define-key org-mode-map
              (kbd "C-c C-i") #'vs_utils/indent_org_block_automatically)

#+END_SRC

** Use of Nano
#+BEGIN_SRC emacs-lisp

  (straight-use-package
   '(nano :type git :host github :repo "rougier/nano-emacs"))

  ;;(use-package nano
  ;;  :ensure t)

  ;;(set-face-attribute 'bold nil :weight 'bold :height 160)
  (setq nano-font-family-monospaced "Roboto Mono")
  (set-face-attribute 'default nil :height 148)

#+END_SRC

* Emacs Helper Packages 
** Why? - Use Vim Modal editing keystorkes.
#+BEGIN_SRC emacs-lisp
  (use-package 
    evil 
    :ensure t 
    :config 
    (evil-mode 1) 
    )
#+END_SRC
** To learn Emacs key maps.
** How? - Adds a completion panel for commands.

#+begin_src emacs-lisp
(use-package which-key
  :defer 0
  :diminish which-key-mode
  :config
  (which-key-mode)
  (setq which-key-idle-delay 1))
#+end_src

** Hydra package
- To quickly open directories and files
- Reduce context switching time

#+begin_src emacs-lisp

  (use-package hydra
    :ensure t)

  (defhydra hydra-zoom (global-map "<f2>")
    "zoom"
    ("g" text-scale-increase "in")
    ("l" text-scale-decrease "out"))

  (defhydra hydra-dired (:exit t)
    "dired navigation"
    ("g" (dired "~/gtd") "GTD")
    ("c" (dired "~/backlog") "Capture")
    ("r" (dired "~/review") "Review")
    ("w" (dired "~/Downloads") "Downloads")
    ("d" (dired "~/Documents") "Documents"))

  (global-set-key (kbd "C-c d") 'hydra-dired/body)

#+end_src

* Emacs Helper Functions
#+begin_src emacs-lisp
  (defun reload-init-file ()
    (interactive)
    (load-file user-init-file))

  (global-set-key (kbd "<f5>") 'reload-init-file)

#+end_src

* Basic configuration

Includes modeline configuration, file save configuration, 2 spaces

#+BEGIN_SRC emacs-lisp
  (display-time-mode 1)
  (setq display-time-24hr-format t)
  (setq display-time-format "%H:%M")

  ;; Disable emacs automatic backup~ file
  (setq make-backup-files nil)

  ;; Disable creating those #auto-save# files
  (setq auto-save-default nil)

  ;; Disable locking
  (setq create-lockfiles nil)

  (setq-default indent-tabs-mode nil)
  (setq-local lisp-indent-function nil)
  (setq-local lisp-indent-offset 2)
#+END_SRC

* Shortcuts to Open Browser
TODO - Create different types of workflows with one click and Hydra
TODO Use the Hydra to automate the workflows 
Open all applications and web pages and different types web application
#+BEGIN_SRC emacs-lisp
  (defun open-web-page (url)
    "Open a web page in the default browser."
    (interactive "sEnter URL: ")
    (browse-url url))

  (defun go_open_ymusic ()
    (interactive)
  (open-web-page "https://music.youtube.com"))

  (global-set-key (kbd "C-c y") 'go_open_ymusic)
#+END_SRC 

* Org mode configuration
** Org mode packages

#+BEGIN_SRC emacs-lisp
    (use-package org
      :ensure t)
  
    (use-package ox-twbs
      :ensure t
      :after org)

    (use-package org-bullets
      :ensure t
      :config
      (setq org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●"))
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

    (setq org-babel-python-command "python3")
    (setq org-plantuml-jar-path (expand-file-name "~/projects/org_mode/org-mode-test/plantuml-1.2024.5.jar"))
    (add-to-list 'org-src-lang-modes '("plantuml" . plantuml))

    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (python . t)
       (shell . t)
       (java . t)
       (C . t)
       (ruby . t)
       (R . t)
       (dot . t)
       (plantuml . t)
       (org . t)))

    ;; Set Org directory
    (setq org-directory "~/gtd")
    ;;(setq org-agenda-files '("backlog.org" "projects.org" "tickler.org"))

    (setq org-attach-id-dir "~/org_attach/")

    (setq org-modules '(org-habit))
    (setq org-habit-graph-column 70)
    (setq org-habit-show-habits-only-for-today nil) ;; To display if we're on track for habit
    (setq org-agenda-skip-scheduled-if-done nil)
    ;; TODO use these
    ;;(ol-bbdb ol-bibtex ol-docview ol-eww ol-gnus org-habit ol-info ol-irc ol-mhe ol-rmail ol-w3m)))
    (setq org-export-backends '(ascii beamer html icalendar latex odt))

    (use-package ox-epub
      :after org
      :commands (org-export-dispatch))

    (defun move-cancelled-tasks-to-archive ()
    "Move cancelled tasks to the archive."
    (interactive)
    (save-mark-and-excursion
      (org-map-entries
       (lambda ()
         (when (string= (org-get-todo-state) "CANCELLED")
           (org-archive-subtree))))
       "/+CANCELLED" 'file))

    ;; Bind the function to a key
    (global-set-key (kbd "C-c C-x a") 'move-cancelled-tasks-to-archive)

    ;; FixME
    ;; Define a function to export Org files to HTML
    ;;(defun my-export-to-html ()
    ;;  "Export the current Org file to HTML."
    ;;  (interactive)
    ;;  (org-export-to-file 'html (concat (buffer-file-name) ".html") nil))
    ;;
           ;;;; Customize key binding for HTML export
    ;;(global-set-key (kbd "C-c e h") 'my-export-to-html)

    (defun vs/gtd_copy_id_to_clipboard() "Copy an ID link with the
             headline to killring, if no ID is there then create a new unique
           ID.  This function works only in org-mode or org-agenda buffers. 
           The purpose of this function is to easily construct id:-links to 
           org-mode items. If its assigned to a key it saves you marking the
           text and copying to the killring."
           (interactive)
           (when (eq major-mode 'org-agenda-mode) ;if we are in agenda mode we switch to orgmode
             (org-agenda-show)
             (org-agenda-goto))       
           (when (eq major-mode 'org-mode) ; do this only in org-mode buffers
             (setq mytmphead (nth 4 (org-heading-components)))
             (setq mytmpid (funcall 'org-id-get-create))
             (setq mytmplink (format "[[id:%s][%s]]" mytmpid mytmphead))
             (kill-new mytmplink)
             (message "Copied %s to killring (clipboard)" mytmplink)))
    (global-set-key (kbd "C-c i") 'vs/gtd_copy_id_to_clipboard)
    (global-set-key (kbd "C-c c") 'org-capture)
    (global-set-key (kbd "C-c a") 'org-agenda)
    (define-key org-mode-map (kbd "C-c o") 'org-open-at-point)

    (evil-define-key 'normal org-mode-map (kbd "TAB") 'org-cycle) ;; C-h k <TAB> to confirm override

    (setq org-log-into-drawer t) ;; C-c C-z - start notes
    (setq org-clock-into-drawer "CLOCKING")
    (setq org-log-reschedule 'time) ;; To disable - (setq org-log-reschedule nil)
    (setq org-log-done 'note) ;; To disable - (setq org-log-done nil)
    (setq org-clock-sound t)

    (defun vs_org/gtd_show_mobile() "Show tasks from Mobile." 
           (interactive)
           (setq org-agenda-files '("~/beorg/inbox.org")))

    (defun vs_org/open_inbox()
          (interactive)
          (find-file "~/beorg/inbox.org")) 

    (defun vs_org/org_show_scratch() "Show Scratch Org." 
           (interactive)
           (setq org-agenda-files '("task.org")))

    ;; Org capture template
    (setq org-capture-templates
          '(("c" "Capture Task, Book, Media")
            ("ct" "TODO entry" entry
             (file+headline "~/backlog/backlog.org" "Backlog")
             (file "~/templates/tpl_todo.txt")
              :empty-lines-before 1)
            ("cb" "Add Book to Read/Listen" entry
             (file+headline "~/backlog/books.org" "Books To Read/Listen")
             (file "~/templates/tpl_book.txt")
              :empty-lines-before 1)
            ("cm" "Media to Watch/Listen" entry
             (file+headline "~/backlog/media.org" "Media to Watch/Listen")
             (file "~/templates/tpl_media.txt")
               :empty-lines-before 1)
            ("cl" "Bookmark" entry
             (file+headline "~/backlog/bookmark.org" "Bookmarks")
             (file "~/templates/tpl_bookmark.txt")
               :empty-lines-before 1)
            ("cy" "Things to Buy" entry
             (file+headline "~/backlog/things_to_buy.org" "Things To Buy")
             (file "~/templates/tpl_buy.txt")
               :empty-lines-before 1)
            ("ce" "Errands" entry
             (file+headline "~/backlog/errands.org" "Errands")
             (file "~/templates/tpl_errands.txt")
               :empty-lines-before 1)
            ("n" "TidBits/Ideas")
            ("nq" "Quotes Tidbits One-liner" entry
             (file"~/motivation/quotes.org")
             (file "~/templates/tpl_quote.txt"))
            ("ni" "Add Idea to Marketplace" entry
             (file+headline "~/idea_marketplace/ideas.org" "Idea MarketPlace")
             (file "~/templates/tpl_idea.txt")
               :empty-lines-before 1)
            ("j" "Create Daily Journal" entry 
            (file+function "~/area/v1/denote/notes/20241201T173755--Journal__daily_journal.org" org-reverse-datetree-goto-date-in-file) "* %?\nEntered on %U\n  %i\n  %a")))

    (setq org-refile-use-outline-path 'file)
    (setq org-outline-path-complete-in-steps nil)

    ;; Add a hook that will log when we activate a task by creating an "ACTIVATED" property the first time the task enters the NEXT state
    (defun log-todo-next-creation-date (&rest ignore)
      "Log NEXT creation time in the property drawer under the key 'ACTIVATED'"
      (when (and (string= (org-get-todo-state) "NEXT")
                 (not (org-entry-get nil "ACTIVATED")))
        (org-entry-put nil "ACTIVATED" (format-time-string "[%Y-%m-%d]"))))
    (add-hook 'org-after-todo-state-change-hook #'log-todo-next-creation-date)

    (setq org-agenda-prefix-format
          '((agenda . " %i %-12:c%?-12t% s")
            (todo   . " ")
            (tags   . " %i %-12:c")
            (search . " %i %-12:c")))

    ;; Automatic saving after refilling
    (setq org-agenda-files 
          (mapcar 'file-truename 
                  (file-expand-wildcards "~/gtd/*.org")))

    ;; Save the corresponding buffers
    (defun gtd-save-org-buffers ()
      "Save `org-agenda-files' buffers without user confirmation.  See also `org-save-all-org-buffers'"
      (interactive)
      (message "Saving org-agenda-files buffers...")
      (save-some-buffers t (lambda () 
                             (when (member (buffer-file-name) org-agenda-files) 
                               t)))
      (message "Saving org-agenda-files buffers... done"))

    ;; Add it after refile
    (advice-add 'org-refile :after
                (lambda (&rest _)
                  (gtd-save-org-buffers)))

#+END_SRC

** Org mode helper script

#+BEGIN_SRC emacs-lisp

  (defun vs_org/opened_buffer_files ()
    "Return the list of files currently opened in emacs"
    (delq nil
          (mapcar (lambda (x)
                    (if (and (buffer-file-name x)
                             (string-match "\\.org$"
                                           (buffer-file-name x)))
                        (buffer-file-name x)))
                  (buffer-list))))

  (defun vs_org/switch_refile_to_buffers() "Show Projects in Pipeline." 
         (interactive)
         (setq org-refile-targets '((vs_org/opened_buffer_files :maxlevel . 9)))
         (setq org-refile-use-outline-path 'file))


  (defun vs_org/archive_cancelled_tasks ()
    "Archive all cancelled tasks in the current buffer or region. A cancelled task is one with a CANCELLED keyword state."
    (interactive)
    (let ((count 0))
      (if (region-active-p)
          (org-map-entries
           (lambda ()
             (when (string= (org-get-todo-state) "CANCELLED")
               (setq count (1+ count))
               (org-archive-subtree)))
           nil 'region)
        (org-map-entries
         (lambda ()
           (when (string= (org-get-todo-state) "CANCELLED")
             (setq count (1+ count))
             (org-archive-subtree)))))
      (message "Archived %d cancelled task%s"
               count (if (= count 1) "" "s"))))

  ;; Optional: Add a key binding
  (global-set-key (kbd "C-c C-x C-a") 'vs_org/archive_cancelled_tasks)

  (defun vs_org/schedule_task (days-ahead start-time duration)
    "Schedule an interval in Org mode DAYS-AHEAD from today, at START-TIME, for DURATION minutes.
  DAYS-AHEAD is number of days from today (0 = today)
  START-TIME should be in 'HH:MM' format
  DURATION should be in minutes"
    (interactive 
     (list 
      (read-number "Days ahead (0 for today): ")
      (read-string "Start time (HH:MM): ")
      (read-number "Duration (minutes): ")))

    (let* ((date (format-time-string "%Y-%m-%d" 
                                     (time-add (current-time) 
                                               (days-to-time days-ahead))))
           (time-parts (split-string start-time ":"))
           (hours (string-to-number (car time-parts)))
           (minutes (string-to-number (cadr time-parts)))
           (end-minutes (+ minutes duration))
           (end-hours (+ hours (/ end-minutes 60)))
           (end-minutes-final (mod end-minutes 60))
           (end-time (format "%02d:%02d" end-hours end-minutes-final)))

      (org-schedule nil (format "%s %s-%s" date start-time end-time))

      (org-set-property "SCHEDULED_INTERVAL" 
                        (format "%s %s-%s" date start-time end-time))))
#+END_SRC 

* Org Mode Helper Packages
** Graphwiz/Dot install
#+begin_src emacs-lisp
  (use-package graphviz-dot-mode
    :ensure t
    :config
    (setq graphviz-dot-indent-width 4))
#+end_src
** Reverse Date Tree
Use this package to log the journal and review entries in descending date order
#+BEGIN_SRC emacs-lisp
;;  (use-package org-reverse-datetree
;;    :ensure t)
;;  (setq-default org-reverse-datetree-level-formats
;;                '("%Y"                    ; year
;;                  (lambda (time) (format-time-string "W%W/%m" (org-reverse-datetree-sunday time))) ; month
;;                  "%d-%A"  ; date))

(use-package org-reverse-datetree
    :ensure t)
(setq-default org-reverse-datetree-level-formats
              '("%Y"                    ; year
                (lambda (time) (format-time-string "W%W/%m" (org-reverse-datetree-sunday time))) ; month
                "%d-%A"))  

#+END_SRC 

** Org Refile Helper Functions
#+begin_src emacs-lisp
(defun vs_org/go_use_same_refile()
  "Refile the current heading within the same file."
  (interactive)
  (let ((org-refile-targets '((nil :maxlevel . 3)))) ; Adjust maxlevel as needed
    (org-refile)))

;; Bind the custom refile function to a key
;;(global-set-key (kbd "C-c r") 'my/org-refile-within-file)
#+END_SRC 

** Yasnippet package
- Why? 
Org mode template to add structured content
- How to use it?
store file with name to expand under emacs_snippets directory
Verify the sub directory path to copy the path
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :hook ((text-mode
     prog-mode
     conf-mode
     snippet-mode) . yas-minor-mode-on)
    :init
    (setq yas-snippet-dirs '("~/emacs_snippets"))
    :config 
    (yas-global-mode 1))
#+END_SRC
** Denote package
Use the package to capture the notes
#+begin_src emacs-lisp

  (defun vs_denote/dired_open ()
    "Short cut to open the notes folder in dired."
    (interactive)
    (dired denote-directory))

  (use-package denote
    :ensure t)
  (setq denote-directory (expand-file-name "~/Dropbox/plain_docs/area/v1/denote/notes"))
  (setq denote-save-buffer-after-creation nil)
  (setq denote-known-keywords '("emacs" "philosophy" "economics" "orgmode" "functionalProgramming" "project"))

  (add-hook 'dired-mode-hook #'denote-dired-mode)

  (let ((map global-map))
    (define-key map (kbd "C-c n n") #'denote)
    (define-key map (kbd "C-c n l") #'vs_denote/dired_open)
    (define-key map (kbd "C-c n r") #'denote-dired-rename-file))

 (defvar my-denote-silo-directories
  `("~/scratch/Readwise/Podcasts"
    "~/Dropbox/plain_docs/area/v1/denote/books"
    "~/Dropbox/plain_docs/area/v1/denote/notes"
    "~/Dropbox/plain_docs/area/v1/denote/essays"
    ;;"~/Dropbox/plain_docs/area/v1/denote/podcast"
    ;; You don't actually need to include the `denote-directory' here
    ;; if you use the regular commands in their global context.  I am
    ;; including it for completeness.
    ,denote-directory)
  "List of file paths pointing to my Denote silos.
  This is a list of strings.")

  (defvar my-denote-commands-for-silos
    '(denote
      denote-date
      denote-subdirectory
      denote-template
      denote-type)
    "List of Denote commands to call after selecting a silo.
    This is a list of symbols that specify the note-creating
    interactive functions that Denote provides.")
  
  (defun my-denote-pick-silo-then-command (silo command)
    "Select SILO and run Denote COMMAND in it.
    SILO is a file path from `my-denote-silo-directories', while
    COMMAND is one among `my-denote-commands-for-silos'."
    (interactive
     (list (completing-read "Select a silo: " my-denote-silo-directories nil t)
           (intern (completing-read
                    "Run command in silo: "
                    my-denote-commands-for-silos nil t))))
    (let ((denote-directory silo))
      (call-interactively command)))

;; Our variant of the above, which does the same thing except from
;; downcasing the string.
(defun my-denote-sluggify-title (str)
  "Make STR an appropriate slug for title."
  (denote--slug-hyphenate (denote--slug-no-punct str)))

;; Now we use our function to sluggify titles without affecting their
;; letter casing.
(setq denote-file-name-slug-functions
      '((title . my-denote-sluggify-title) ; our function here
        (signature . denote-sluggify-signature)
        (keyword . identity)))
#+end_src

** Deft package
#+begin_src emacs_lisp
 (use-package deft
  :ensure t)
 (setq deft-default-extension "md")
 (setq deft-extensions '("md"))
 (setq deft-directory "~/tutorial/org-mode-source/Podcasts")
 (setq deft-recursive t)
 (setq deft-use-filename-as-title nil)
 (setq deft-use-filter-string-for-filename t)
 (setq deft-file-naming-rules '((noslash . "-")
                                (nospace . "-")
                                (case-fn . downcase)))
 (setq deft-text-mode 'org-mode)
 (global-set-key (kbd "C-M-S-s-d") 'deft)
 (global-set-key (kbd "C-x C-g") 'deft-find-file)
#+end_src

** Navigation packages

#+begin_src emacs-lisp
  ;; M-x package-refresh-contents - to refresh the contents

  ;; The `vertico' package applies a vertical layout to the minibuffer.
  ;; It also pops up the minibuffer eagerly so we can see the available
  ;; options without further interactions.  This package is very fast
  ;; and "just works", though it also is highly customisable in case we
  ;; need to modify its behaviour.
  ;;
  ;; Further reading: https://protesilaos.com/emacs/dotemacs#h:cff33514-d3ac-4c16-a889-ea39d7346dc5
  (use-package vertico
    :ensure t
    :config
    (setq vertico-cycle t)
    (setq vertico-resize nil)
    (vertico-mode 1))

  ;; The `marginalia' package provides helpful annotations next to
  ;; completion candidates in the minibuffer.  The information on
  ;; display depends on the type of content.  If it is about files, it
  ;; shows file permissions and the last modified date.  If it is a
  ;; buffer, it shows the buffer's size, major mode, and the like.
  ;;
  ;; Further reading: https://protesilaos.com/emacs/dotemacs#h:bd3f7a1d-a53d-4d3e-860e-25c5b35d8e7e
  (use-package marginalia
    :ensure t
    :config
    (marginalia-mode 1))

  ;; The `orderless' package lets the minibuffer use an out-of-order
  ;; pattern matching algorithm.  It matches space-separated words or
  ;; regular expressions in any order.  In its simplest form, something
  ;; like "ins pac" matches `package-menu-mark-install' as well as
  ;; `package-install'.  This is a powerful tool because we no longer
  ;; need to remember exactly how something is named.
  ;;
  ;; Note that Emacs has lots of "completion styles" (pattern matching
  ;; algorithms), but let us keep things simple.
  ;;
  ;; Further reading: https://protesilaos.com/emacs/dotemacs#h:7cc77fd0-8f98-4fc0-80be-48a758fcb6e2
  (use-package orderless
    :ensure t
    :config
    (setq completion-styles '(orderless basic)))

  ;; The `embark' package lets you target the thing or context at point
  ;; and select an action to perform on it.  Use the `embark-act'
  ;; command while over something to find relevant commands.
  ;;
  ;; When inside the minibuffer, `embark' can collect/export the
  ;; contents to a fully fledged Emacs buffer.  The `embark-collect'
  ;; command retains the original behaviour of the minibuffer, meaning
  ;; that if you navigate over the candidate at hit RET, it will do what
  ;; the minibuffer would have done.  In contrast, the `embark-export'
  ;; command reads the metadata to figure out what category this is and
  ;; places them in a buffer whose major mode is specialised for that
  ;; type of content.  For example, when we are completing against
  ;; files, the export will take us to a `dired-mode' buffer; when we
  ;; preview the results of a grep, the export will put us in a
  ;; `grep-mode' buffer.
  ;;
  ;; Further reading: https://protesilaos.com/emacs/dotemacs#h:61863da4-8739-42ae-a30f-6e9d686e1995
  (use-package embark
    :ensure t
    :bind (("C-." . embark-act)
           :map minibuffer-local-map
           ("C-c C-c" . embark-collect)
           ("C-c C-e" . embark-export)))
  
  (use-package consult
    :ensure t
    :bind (;; A recursive grep
           ("M-s M-g" . consult-grep)
           ;; Search for files names recursively
           ("M-s M-f" . consult-find)
           ;; Search through the outline (headings) of the file
           ("M-s M-o" . consult-outline)
           ;; Search the current buffer
           ("M-s M-l" . consult-line)
           ;; Switch to another buffer, or bookmarked file, or recently
           ;; opened file.
           ("M-s M-b" . consult-buffer)))
  ;; The `embark-consult' package is glue code to tie together `embark'
  ;; and `consult'.
  (use-package embark-consult
    :ensure t)

  ;; The `wgrep' packages lets us edit the results of a grep search
  ;; while inside a `grep-mode' buffer.  All we need is to toggle the
  ;; editable mode, make the changes, and then type C-c C-c to confirm
  ;; or C-c C-k to abort.
  ;;
  ;; Further reading: https://protesilaos.com/emacs/dotemacs#h:9a3581df-ab18-4266-815e-2edd7f7e4852
  (use-package wgrep
    :ensure t
    :bind ( :map grep-mode-map
            ("e" . wgrep-change-to-wgrep-mode)
            ("C-x C-q" . wgrep-change-to-wgrep-mode)
            ("C-c C-c" . wgrep-finish-edit)))

  ;; The built-in `savehist-mode' saves minibuffer histories.  Vertico
  ;; can then use that information to put recently selected options at
  ;; the top.
  ;;
  ;; Further reading: https://protesilaos.com/emacs/dotemacs#h:25765797-27a5-431e-8aa4-cc890a6a913a
  (savehist-mode 1)

  ;; The built-in `recentf-mode' keeps track of recently visited files.
  ;; You can then access those through the `consult-buffer' interface or
  ;; with `recentf-open'/`recentf-open-files'.
  ;;
  ;; I do not use this facility, because the files I care about are
  ;; either in projects or are bookmarked.
  (recentf-mode 1)

#+end_src

** Consult notes package - usage and tests
#+begin_src emacs-lisp
  (use-package consult-notes
    :ensure t)

  (setq consult-notes-file-dir-sources
        `(("Denote Notes"  ?d ,(denote-directory))
          ("Books"  ?b "~/Dropbox/plain_docs/area/v1/denote/books")
          ("Courses"  ?c "~/Dropbox/plain_docs/area/v1/denote/courses")
          ("Podcast"  ?p "~/Dropbox/plain_docs/area/v1/denote/podcast")
          ("Notes"  ?n "~/Dropbox/plain_docs/area/v1/denote/notes")))
#+end_src


** Calender Workflow for GTD

#+begin_src emacs-lisp
  (setq org-icalendar-include-todo t
      org-icalendar-use-scheduled '(todo-start event-if-todo)
      org-icalendar-use-deadline '(todo-due event-if-todo)
      org-icalendar-categories '(all-tags category)
      org-icalendar-with-timestamps 'active)
#+end_src

* Header
#+STARTUP: hidestars overview
#+ARCHIVE: ~/org_archive/%s_archive::
#+AUTHOR: Vikram 
#+EMAIL: rootid@vikram.com
#+OPTIONS: TOC:NIL NUM:NI
#+TITLE: Emacs Configuration
#+OPTIONS: toc:nil
#+TOC: headlines 1

