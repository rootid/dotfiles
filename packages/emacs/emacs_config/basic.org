#+TITLE: Emacs Configuration

* Introduction

This is my Emacs configuration file, where I maintain packages, keybindings and routines/functions to suit my workflows.

* Basic configuration
Used as a minimal setup configuration (No additional plugins), with UI adjustments

#+BEGIN_SRC emacs-lisp
;; UI Customization
(setq inhibit-startup-message t) ; Disable startup message
(tooltip-mode -1) ; Disable tooltips
(menu-bar-mode -1) ; Disable the menu bar

;; TODO: Fix backup files and directories
;; (setq auto-save-default nil) ;; Do not create autosave (filename~) files
;;(setq auto-save-file-name-transforms `((".*" "~/.emacs.d/autosaves/" t))) ; store autosave files in autosave directory, Prereq - make sure dir is created
#+END_SRC


* Customizations
Additional UI cutomization like theme, status bar configuration

** Theme
How to evaluate themes quickly and iteratively? 
To Test theme use M-X cutomize-themes and then test all themes
#+BEGIN_SRC emacs-lisp
;; TODO - how to pull all the theme to test/evaluate?
;;(use-package doom-themes
;;    :config
;;    (load-theme 'doom-wilmersdorf t))

;; Fix all icon issue
;;(use-package all-the-icons
;;  :ensure t)
;;(use-package doom-modeline
;;    :ensure t
;;    :init (doom-modeline-mode 1)
;;    :custom ((doom-modeline-height 15)))

(use-package 
  iodine-theme 
  :config (load-theme 'iodine t))

#+END_SRC

* Custom Macros/Functions 
Used to write/add custom function 

#+BEGIN_SRC emacs-lisp
;;(column-number-mode) ; Show colum number 
;;(global-display-line-numbers-mode t) ; display line number 
;; Example of interactive command
(defun my-greet-user (name) 
  "Greet the user by name." 
  (interactive "sEnter your name: ") 
  (message "Hello, %s!" name))

(global-set-key (kbd "C-c g") 'my-greet-user)

#+END_SRC

* Basic Key Setup 
setup Keys without any additional packages 

#+BEGIN_SRC emacs-lisp
; Key bindings for eshell
(global-set-key (kbd "C-c e") 'eshell)
#+END_SRC

* Package Setup
Different packages are organized as per the categories.

** Package Managers
** Helper Packages (Man/Help packages)
#+BEGIN_SRC emacs-lisp

  ;; To view the commands executed on right panel 
  ;; TODO : Fix me - looks like it's not working as expected
  (use-package 
    command-log-mode 
    :ensure t)

  ;; Package for command completion, different packges can be used with ivy e.g. counsel and other alterntives are helm, ido (TODO: Explore these packages)
  (use-package 
    ivy 
    :ensure t
    ;;:diminish
    :bind 
     (("C-s" . swiper) :map ivy-minibuffer-map ("TAB" . ivy-alt-done) 
	   ("C-l" . ivy-alt-done) 
	   ("C-j" . ivy-next-line) 
	   ("C-k" . ivy-previous-line) 
	   :map ivy-switch-buffer-map ("C-k" . ivy-previous-line) 
	   ("C-l" . ivy-done) 
	   ("C-d" . ivy-switch-buffer-kill) 
	   :map ivy-reverse-i-search-map ("C-k" . ivy-previous-line) 
	   ("C-d" . ivy-reverse-i-search-kill)) 
    :config (ivy-mode 1))

  ;; on-the-fly keybinding suggestions in the minibuffer
  (use-package 
    which-key 
    :ensure t 
    :init (which-key-mode) 
    :diminish which-key-mode 
    :config (setq which-key-idle-delay 1))

  ;; Enhances the visual appearance of Ivy completion and selection menus.
  (use-package 
    ivy-rich 
    :ensure t 
    :init (ivy-rich-mode 1)
    :config
    (setq ivy-rich-display-transformers-list
	'(counsel-M-x
	  (:columns
	   ((counsel-M-x-transformer (:width 40))
	    (ivy-rich-counsel-function-docstring (:face font-lock-doc-face))))))
  )

  ;; collection of enhanced completion and selection utilities for Emacs
  (use-package 
    counsel 
    :ensure t 
    :bind (
     ;("M-x" . counsel-M-x)
     ("C-x b" . counsel-ibuffer) 
     ("C-x C-f" . counsel-find-file) 
     :map minibuffer-local-map ("C-r" . 'counsel-minibuffer-history)) 
     :config (setq ivy-initial-inputs-alist nil)) ;; Don't start searches with 

#+END_SRC

** Utilities Packages

*** Org-roam package
#+BEGIN_SRC emacs-lisp
(use-package org-roam
:ensure t
:custom
(org-roam-directory "~/plain_docs/notes/pvt")
:bind (
  ("C-c n l" . 'org-roam-buffer-toggle)
  ("C-c n i" . 'org-roam-node-insert)
  ("C-c n f" . 'org-roam-node-find)
)
:config
(org-roam-setup))

;; Optionally, you can add keybindings for Org-roam commands
;;(global-set-key (kbd "C-c n r") 'org-roam-buffer-toggle)
;;(global-set-key (kbd "C-c n f") 'org-roam-node-find)

(defun vs_org_roam/org_id_update_org_roam_files ()
  "Update Org-ID locations for all Org-roam files."
  (interactive)
  (org-id-update-id-locations (org-roam--list-all-files)))

(defun vs_org_roam/org_id_update_id_current_file ()
  "Scan the current buffer for Org-ID locations and update them."
  (interactive)
  (org-id-update-id-locations (list (buffer-file-name (current-buffer)))))

#+END_SRC 

*** Org-roam-server package
#+BEGIN_SRC emacs-lisp
  (use-package org-roam-ui
    :ensure t
    :after org-roam
    :config
    ;;(org-roam-ui-mode)
    (setq org-roam-ui-sync-theme t
	   org-roam-ui-follow t
	   org-roam-ui-update-on-save t
	   org-roam-ui-open-on-start nil))

  (defun vs_org_roam_ui/start_server()
    "starting roam ui server."
    (interactive)
    (org-roam-ui-open))

  (defun vs_org_roam_ui/stop_server()
    "starting roam ui server."
    (interactive)
    (progn
    (if org-roam-ui-mode (setq org-roam-ui-mode -1))
    (if org-roam-ui-follow (setq org-roam-ui-follow -1))
    ))

    ;;(setq org-roam-ui-mode nil)
    ;;(setq org-roam-ui-follow -1)
#+END_SRC 

*** Key-binding package

#+BEGIN_SRC emacs-lisp
;; 3 Types of key bindigs
;; key binding types
(global-set-key (kbd "C-c C-f") 'find-file) ;; global
(define-key emacs-lisp-mode-map (kbd "C-c C-e") 'eval-buffer) ;; use keymap
;;(global-set-key (kbd "C-c t") 'toggle-evil-mode)
;;(define-key global-map (kbd "C-c c") 'org-capture)
#+END_SRC 

*** Evil package
#+BEGIN_SRC emacs-lisp
;; TODO : Explore evil collections and how to use it
(defun vs/evil_override_read_key_map ()
  ;; Override key bindings in `evil-read-key-map`.
  ;; Add more key bindings as needed
  ;;(define-key evil-read-key-map (kbd "jk") #'keyboard-quit)
  (define-key evil-read-key-map (kbd "C-[") #'keyboard-quit)
  (define-key evil-read-key-map (kbd "C-]") #'keyboard-quit)
  (define-key evil-read-key-map (kbd "C-g") #'keyboard-quit)
)

(defun vs/evil_init_config()
  ;; Add more key bindings as needed
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil) 
  (setq evil-want-C-u-scroll t)
  (setq evil-want-C-i-jump nil)
  (setq evil-respect-visual-line-mode t)
)

(use-package 
  evil 
  :ensure t 
  :init
  (progn (vs/evil_init_config))
  :config 
  (evil-mode 1) 
  (add-hook 'evil-read-key-map-hook 'vs/evil_override_read_key_map)
  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state) 
  (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join))

#+END_SRC 
** Planners Packages

*** Org mode package
#+BEGIN_SRC emacs-lisp
;; Define a function
(defun vs/org_mode_config()
  ;; Set the directory where your Org files are stored
  (setq org-directory "~/gtd")

  ;; Set the default capture template
  ;; format for org file mmm_weekno_sprint
  (setq org-capture-templates
        '(("t" "Todo" entry (file+headline "~/gtd/aug_32_5_23.org" "Tasks")
           "* TODO %?\n %U\n %a\n %i")))

  ;; Set the default agenda files
  (setq org-agenda-files '("~/gtd/scratch_backlog.org"
                          "~/gtd/aug_32_5_23.org"
                          "~/gtd/jul_27_0.org"
                          "~/gtd/jul_28_1.org"
                          "~/gtd/backlog.org"
                          "~/gtd/tickler.org"
                          "~/gtd/habits.org")

))

(use-package org
  :ensure t
  :config
  ;; Call the function defined outside of `use-package`
  (vs/org_mode_config))

(setq org-modules '(org-habit))

(custom-set-faces
 '(org-habit ((t (:foreground "green")))))

(setq org-log-into-drawer t)
(setq org-agenda-log-mode-items '(closed clock state))
(setq org-agenda-skip-scheduled-if-done nil)
;; TODO : Fix the agenda 
(setq org-agenda-custom-commands
      '(("v" "Next 3 Days"
         ((agenda ""
                  ((org-agenda-span 3)
                   (org-agenda-start-day "+0d"))))
         )))

(setq org-agenda-custom-commands

      '(("t" "Next Day's Habits"
         ((agenda ""
                  ((org-agenda-span 1)
                   (org-agenda-start-day "+1d")
                   (org-agenda-show-all-dates nil)
                   (org-agenda-start-with-log-mode nil)
                   (org-agenda-skip-scheduled-if-done nil)
                   (org-agenda-skip-deadline-if-done nil)
                   (org-agenda-skip-timestamp-if-done nil)
                   (org-agenda-skip-tag-todo "HOLD/INACTIVE")))
          (tags-todo "STYLE=\"habit\""
                     ((org-agenda-overriding-header "Habits")
                      (org-agenda-skip-function
                       '(org-agenda-skip-entry-if 'notregexp ":STYLE:"))))
          ))))

(define-key global-map (kbd "C-c c") 'org-capture)

#+END_SRC 
** Docs Packages (To manage Smart Notes)
** Ivy and Counsel

* Keybindings

** Ivy-related Keybindings

#+BEGIN_SRC emacs-lisp
;; Set keybindings for Ivy and Counsel
(global-set-key (kbd "C-c C-r") 'ivy-resume)
(global-set-key (kbd "C-c s") 'swiper)
(global-set-key (kbd "C-c g") 'counsel-rg)
#+END_SRC

** Other Keybindings

#+BEGIN_SRC emacs-lisp
;; Set other keybindings
(global-set-key (kbd "C-c f") 'find-file)
(global-set-key (kbd "C-c b") 'switch-to-buffer)
(global-set-key (kbd "C-c w") 'save-buffer)
#+END_SRC

* Conclusion

This concludes my Emacs configuration. Feel free to explore and modify it to suit your preferences.
